@page "/taskviewmodels/create"
@using BlazorToDoTasks.Client.ViewModels
@using BlazorToDoTasks.Client.Components.Alerts
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IToDoTasksService service
<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>TaskViewModel</h4>
<hr />
<div class="row">
    <ErrorAlert ServerError="@ServerError" />
    <div class="col-md-4">
        <EditForm method="post" EditContext="editContext" OnValidSubmit="AddTaskViewModel" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputText id="title" @bind-Value="TaskViewModel.Title" class="form-control" />
                <ValidationMessage For="() => TaskViewModel.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="TaskViewModel.Description" class="form-control" />
                <ValidationMessage For="() => TaskViewModel.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="startdate" class="form-label">StartDate:</label>
                <InputDate id="startdate" @bind-Value="TaskViewModel.StartDate" class="form-control" />
                <ValidationMessage For="() => TaskViewModel.StartDate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="enddate" class="form-label">EndDate:</label>
                <InputDate id="enddate" @bind-Value="TaskViewModel.EndDate" class="form-control" />
                <ValidationMessage For="() => TaskViewModel.EndDate" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/taskviewmodels">Back to List</a>
</div>

@code {

    private string ServerError { get; set; }
    [SupplyParameterFromForm]
    public TaskViewModel TaskViewModel { get; set; } = new();

    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;
    protected override void OnInitialized()
    {
        InitializeTaskViewModel();
        ServerError = null;
        InitializeEditContext();
    }

    private void InitializeTaskViewModel()
    {
        TaskViewModel.StartDate = new DateTime(DateTime.Now.Year, 1, 1);
        TaskViewModel.EndDate = new DateTime(DateTime.Now.Year, 1, 1);
    }

    private void InitializeEditContext()
    {
        editContext = new EditContext(TaskViewModel);
        validationMessageStore = new ValidationMessageStore(editContext);
        editContext.OnValidationStateChanged += (sender, e) => StateHasChanged();
    }

    public async Task AddTaskViewModel()
    {
        validationMessageStore.Clear();
        ServerError = null;

        var response = await service.CreateTask(TaskViewModel);
        if (response == null)
        {
            ServerError = "Erro interno no servidor";
        }
        else if (response.Count() == 0)
        {
            NavigationManager.NavigateTo("/taskviewmodels");
        }
        else
        {

            foreach (var error in response)
            {
                var fieldIdentifier = new FieldIdentifier(TaskViewModel, error.PropertyName);
                validationMessageStore.Add(fieldIdentifier, error.ErrorMessage);
            }
            editContext.NotifyValidationStateChanged();
        }
    }
}