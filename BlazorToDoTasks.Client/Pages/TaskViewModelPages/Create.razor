@page "/taskviewmodels/create"
@page "/taskviewmodels/edit/{Id:int}"

@using BlazorToDoTasks.Client.ViewModels
@using BlazorToDoTasks.Client.Components.Alerts
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IToDoTasksService service
<PageTitle>@(Id > 0 ? "Update" : "Create")</PageTitle>

<h1>@(Id > 0 ? "Update" : "Create")</h1>

<h4>Task</h4>
<hr />
<div class="row">
    <ErrorAlert ServerError="@ServerError" />
    <div class="col-md-4">
        <EditForm method="post" Model="TaskViewModel" OnValidSubmit="AddTaskViewModel" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ServerValidator @ref="_serverValidator" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputText id="title" @bind-Value="TaskViewModel.Title" class="form-control" />
                <ValidationMessage For="() => TaskViewModel.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="TaskViewModel.Description" class="form-control" />
                <ValidationMessage For="() => TaskViewModel.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="startdate" class="form-label">StartDate:</label>
                <InputDate id="startdate" @bind-Value="TaskViewModel.StartDate" class="form-control" />
                <ValidationMessage For="() => TaskViewModel.StartDate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="enddate" class="form-label">EndDate:</label>
                <InputDate id="enddate" @bind-Value="TaskViewModel.EndDate" class="form-control" />
                <ValidationMessage For="() => TaskViewModel.EndDate" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/taskviewmodels">Back to List</a>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string ServerError { get; set; }
    [SupplyParameterFromForm]
    public TaskViewModel TaskViewModel { get; set; } = new();

    private ServerValidator _serverValidator;

    protected override void OnInitialized()
    {
        InitializeTaskViewModel();
        ServerError = null;
    }

    private void InitializeTaskViewModel()
    {
        TaskViewModel.StartDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
        TaskViewModel.EndDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    }


    public async Task AddTaskViewModel()
    {

        ServerError = null;

        IEnumerable<ErrorResponseViewModel> response;
        if (TaskViewModel.Id == 0)
            response = await service.CreateTask(TaskViewModel);
        else
            response = await service.UpdateTask(TaskViewModel);

        if (response == null)
        {
            ServerError = "Erro interno no servidor";
        }
        else if (response.Count() == 0)
        {
            NavigationManager.NavigateTo("/taskviewmodels");
        }
        else
        {
            _serverValidator.DisplayErrors(response);

        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
            TaskViewModel = await service.GetTaskById(Id);
    }
}