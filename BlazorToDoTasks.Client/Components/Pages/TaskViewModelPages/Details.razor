@* @page "/taskviewmodels/details"
@inject BlazorToDoTasks.Client.Data.BlazorToDoTasksClientContext DB
@using BlazorToDoTasks.Client.ViewModels
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>TaskViewModel</h4>
    <hr />
    @if (taskviewmodel is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@taskviewmodel.Title</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@taskviewmodel.Description</dd>
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@taskviewmodel.StartDate</dd>
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@taskviewmodel.EndDate</dd>
        </dl>
        <div>
            <a href="@($"/taskviewmodels/edit?id={taskviewmodel.Id}")">Edit</a> |
            <a href="@($"/taskviewmodels")">Back to List</a>
        </div>
    }
</div>

@code {
    TaskViewModel? taskviewmodel;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        taskviewmodel = await DB.TaskViewModel.FirstOrDefaultAsync(m => m.Id == Id);

        if (taskviewmodel is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
 *@